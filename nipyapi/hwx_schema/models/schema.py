# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Schema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'version': 'int',
        'id': 'int',
        'schema': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'version': 'version',
        'id': 'id',
        'schema': 'schema'
    }

    def __init__(self, subject=None, version=None, id=None, schema=None):
        """
        Schema - a model defined in Swagger
        """

        self._subject = None
        self._version = None
        self._id = None
        self._schema = None

        if subject is not None:
          self.subject = subject
        if version is not None:
          self.version = version
        if id is not None:
          self.id = id
        if schema is not None:
          self.schema = schema

    @property
    def subject(self):
        """
        Gets the subject of this Schema.

        :return: The subject of this Schema.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Schema.

        :param subject: The subject of this Schema.
        :type: str
        """

        self._subject = subject

    @property
    def version(self):
        """
        Gets the version of this Schema.

        :return: The version of this Schema.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Schema.

        :param version: The version of this Schema.
        :type: int
        """

        self._version = version

    @property
    def id(self):
        """
        Gets the id of this Schema.

        :return: The id of this Schema.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Schema.

        :param id: The id of this Schema.
        :type: int
        """

        self._id = id

    @property
    def schema(self):
        """
        Gets the schema of this Schema.

        :return: The schema of this Schema.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this Schema.

        :param schema: The schema of this Schema.
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Schema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
