# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CompatibilityResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compatible': 'bool',
        'error_message': 'str',
        'error_location': 'str',
        'schema': 'str'
    }

    attribute_map = {
        'compatible': 'compatible',
        'error_message': 'errorMessage',
        'error_location': 'errorLocation',
        'schema': 'schema'
    }

    def __init__(self, compatible=None, error_message=None, error_location=None, schema=None):
        """
        CompatibilityResult - a model defined in Swagger
        """

        self._compatible = None
        self._error_message = None
        self._error_location = None
        self._schema = None

        if compatible is not None:
          self.compatible = compatible
        if error_message is not None:
          self.error_message = error_message
        if error_location is not None:
          self.error_location = error_location
        if schema is not None:
          self.schema = schema

    @property
    def compatible(self):
        """
        Gets the compatible of this CompatibilityResult.

        :return: The compatible of this CompatibilityResult.
        :rtype: bool
        """
        return self._compatible

    @compatible.setter
    def compatible(self, compatible):
        """
        Sets the compatible of this CompatibilityResult.

        :param compatible: The compatible of this CompatibilityResult.
        :type: bool
        """

        self._compatible = compatible

    @property
    def error_message(self):
        """
        Gets the error_message of this CompatibilityResult.

        :return: The error_message of this CompatibilityResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this CompatibilityResult.

        :param error_message: The error_message of this CompatibilityResult.
        :type: str
        """

        self._error_message = error_message

    @property
    def error_location(self):
        """
        Gets the error_location of this CompatibilityResult.

        :return: The error_location of this CompatibilityResult.
        :rtype: str
        """
        return self._error_location

    @error_location.setter
    def error_location(self, error_location):
        """
        Sets the error_location of this CompatibilityResult.

        :param error_location: The error_location of this CompatibilityResult.
        :type: str
        """

        self._error_location = error_location

    @property
    def schema(self):
        """
        Gets the schema of this CompatibilityResult.

        :return: The schema of this CompatibilityResult.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this CompatibilityResult.

        :param schema: The schema of this CompatibilityResult.
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CompatibilityResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
