# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchemaMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'schema_group': 'str',
        'name': 'str',
        'description': 'str',
        'compatibility': 'str',
        'validation_level': 'str',
        'evolve': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'schema_group': 'schemaGroup',
        'name': 'name',
        'description': 'description',
        'compatibility': 'compatibility',
        'validation_level': 'validationLevel',
        'evolve': 'evolve'
    }

    def __init__(self, type=None, schema_group=None, name=None, description=None, compatibility=None, validation_level=None, evolve=None):
        """
        SchemaMetadata - a model defined in Swagger
        """

        self._type = None
        self._schema_group = None
        self._name = None
        self._description = None
        self._compatibility = None
        self._validation_level = None
        self._evolve = None

        if type is not None:
          self.type = type
        if schema_group is not None:
          self.schema_group = schema_group
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if compatibility is not None:
          self.compatibility = compatibility
        if validation_level is not None:
          self.validation_level = validation_level
        if evolve is not None:
          self.evolve = evolve

    @property
    def type(self):
        """
        Gets the type of this SchemaMetadata.

        :return: The type of this SchemaMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SchemaMetadata.

        :param type: The type of this SchemaMetadata.
        :type: str
        """

        self._type = type

    @property
    def schema_group(self):
        """
        Gets the schema_group of this SchemaMetadata.

        :return: The schema_group of this SchemaMetadata.
        :rtype: str
        """
        return self._schema_group

    @schema_group.setter
    def schema_group(self, schema_group):
        """
        Sets the schema_group of this SchemaMetadata.

        :param schema_group: The schema_group of this SchemaMetadata.
        :type: str
        """

        self._schema_group = schema_group

    @property
    def name(self):
        """
        Gets the name of this SchemaMetadata.

        :return: The name of this SchemaMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SchemaMetadata.

        :param name: The name of this SchemaMetadata.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this SchemaMetadata.

        :return: The description of this SchemaMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SchemaMetadata.

        :param description: The description of this SchemaMetadata.
        :type: str
        """

        self._description = description

    @property
    def compatibility(self):
        """
        Gets the compatibility of this SchemaMetadata.

        :return: The compatibility of this SchemaMetadata.
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """
        Sets the compatibility of this SchemaMetadata.

        :param compatibility: The compatibility of this SchemaMetadata.
        :type: str
        """
        allowed_values = ["NONE", "BACKWARD", "FORWARD", "BOTH"]
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def validation_level(self):
        """
        Gets the validation_level of this SchemaMetadata.

        :return: The validation_level of this SchemaMetadata.
        :rtype: str
        """
        return self._validation_level

    @validation_level.setter
    def validation_level(self, validation_level):
        """
        Sets the validation_level of this SchemaMetadata.

        :param validation_level: The validation_level of this SchemaMetadata.
        :type: str
        """
        allowed_values = ["LATEST", "ALL"]
        if validation_level not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_level` ({0}), must be one of {1}"
                .format(validation_level, allowed_values)
            )

        self._validation_level = validation_level

    @property
    def evolve(self):
        """
        Gets the evolve of this SchemaMetadata.

        :return: The evolve of this SchemaMetadata.
        :rtype: bool
        """
        return self._evolve

    @evolve.setter
    def evolve(self, evolve):
        """
        Sets the evolve of this SchemaMetadata.

        :param evolve: The evolve of this SchemaMetadata.
        :type: bool
        """

        self._evolve = evolve

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchemaMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
