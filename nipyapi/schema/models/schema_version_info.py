# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchemaVersionInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'schema_metadata_id': 'int',
        'name': 'str',
        'description': 'str',
        'version': 'int',
        'schema_text': 'str',
        'timestamp': 'int',
        'state_id': 'str',
        'merge_info': 'MergeInfo'
    }

    attribute_map = {
        'id': 'id',
        'schema_metadata_id': 'schemaMetadataId',
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'schema_text': 'schemaText',
        'timestamp': 'timestamp',
        'state_id': 'stateId',
        'merge_info': 'mergeInfo'
    }

    def __init__(self, id=None, schema_metadata_id=None, name=None, description=None, version=None, schema_text=None, timestamp=None, state_id=None, merge_info=None):
        """
        SchemaVersionInfo - a model defined in Swagger
        """

        self._id = None
        self._schema_metadata_id = None
        self._name = None
        self._description = None
        self._version = None
        self._schema_text = None
        self._timestamp = None
        self._state_id = None
        self._merge_info = None

        if id is not None:
          self.id = id
        if schema_metadata_id is not None:
          self.schema_metadata_id = schema_metadata_id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if version is not None:
          self.version = version
        if schema_text is not None:
          self.schema_text = schema_text
        if timestamp is not None:
          self.timestamp = timestamp
        if state_id is not None:
          self.state_id = state_id
        if merge_info is not None:
          self.merge_info = merge_info

    @property
    def id(self):
        """
        Gets the id of this SchemaVersionInfo.

        :return: The id of this SchemaVersionInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SchemaVersionInfo.

        :param id: The id of this SchemaVersionInfo.
        :type: int
        """

        self._id = id

    @property
    def schema_metadata_id(self):
        """
        Gets the schema_metadata_id of this SchemaVersionInfo.

        :return: The schema_metadata_id of this SchemaVersionInfo.
        :rtype: int
        """
        return self._schema_metadata_id

    @schema_metadata_id.setter
    def schema_metadata_id(self, schema_metadata_id):
        """
        Sets the schema_metadata_id of this SchemaVersionInfo.

        :param schema_metadata_id: The schema_metadata_id of this SchemaVersionInfo.
        :type: int
        """

        self._schema_metadata_id = schema_metadata_id

    @property
    def name(self):
        """
        Gets the name of this SchemaVersionInfo.

        :return: The name of this SchemaVersionInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SchemaVersionInfo.

        :param name: The name of this SchemaVersionInfo.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this SchemaVersionInfo.

        :return: The description of this SchemaVersionInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SchemaVersionInfo.

        :param description: The description of this SchemaVersionInfo.
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """
        Gets the version of this SchemaVersionInfo.

        :return: The version of this SchemaVersionInfo.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this SchemaVersionInfo.

        :param version: The version of this SchemaVersionInfo.
        :type: int
        """

        self._version = version

    @property
    def schema_text(self):
        """
        Gets the schema_text of this SchemaVersionInfo.

        :return: The schema_text of this SchemaVersionInfo.
        :rtype: str
        """
        return self._schema_text

    @schema_text.setter
    def schema_text(self, schema_text):
        """
        Sets the schema_text of this SchemaVersionInfo.

        :param schema_text: The schema_text of this SchemaVersionInfo.
        :type: str
        """

        self._schema_text = schema_text

    @property
    def timestamp(self):
        """
        Gets the timestamp of this SchemaVersionInfo.

        :return: The timestamp of this SchemaVersionInfo.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this SchemaVersionInfo.

        :param timestamp: The timestamp of this SchemaVersionInfo.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def state_id(self):
        """
        Gets the state_id of this SchemaVersionInfo.

        :return: The state_id of this SchemaVersionInfo.
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """
        Sets the state_id of this SchemaVersionInfo.

        :param state_id: The state_id of this SchemaVersionInfo.
        :type: str
        """
        if state_id is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', state_id):
            raise ValueError("Invalid value for `state_id`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._state_id = state_id

    @property
    def merge_info(self):
        """
        Gets the merge_info of this SchemaVersionInfo.

        :return: The merge_info of this SchemaVersionInfo.
        :rtype: MergeInfo
        """
        return self._merge_info

    @merge_info.setter
    def merge_info(self, merge_info):
        """
        Sets the merge_info of this SchemaVersionInfo.

        :param merge_info: The merge_info of this SchemaVersionInfo.
        :type: MergeInfo
        """

        self._merge_info = merge_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchemaVersionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
