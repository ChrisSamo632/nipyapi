# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchemaVersion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'schema_text': 'str',
        'initial_state': 'str',
        'state_details': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'schema_text': 'schemaText',
        'initial_state': 'initialState',
        'state_details': 'stateDetails'
    }

    def __init__(self, description=None, schema_text=None, initial_state=None, state_details=None):
        """
        SchemaVersion - a model defined in Swagger
        """

        self._description = None
        self._schema_text = None
        self._initial_state = None
        self._state_details = None

        if description is not None:
          self.description = description
        if schema_text is not None:
          self.schema_text = schema_text
        if initial_state is not None:
          self.initial_state = initial_state
        if state_details is not None:
          self.state_details = state_details

    @property
    def description(self):
        """
        Gets the description of this SchemaVersion.

        :return: The description of this SchemaVersion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SchemaVersion.

        :param description: The description of this SchemaVersion.
        :type: str
        """

        self._description = description

    @property
    def schema_text(self):
        """
        Gets the schema_text of this SchemaVersion.

        :return: The schema_text of this SchemaVersion.
        :rtype: str
        """
        return self._schema_text

    @schema_text.setter
    def schema_text(self, schema_text):
        """
        Sets the schema_text of this SchemaVersion.

        :param schema_text: The schema_text of this SchemaVersion.
        :type: str
        """

        self._schema_text = schema_text

    @property
    def initial_state(self):
        """
        Gets the initial_state of this SchemaVersion.

        :return: The initial_state of this SchemaVersion.
        :rtype: str
        """
        return self._initial_state

    @initial_state.setter
    def initial_state(self, initial_state):
        """
        Sets the initial_state of this SchemaVersion.

        :param initial_state: The initial_state of this SchemaVersion.
        :type: str
        """
        if initial_state is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', initial_state):
            raise ValueError("Invalid value for `initial_state`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._initial_state = initial_state

    @property
    def state_details(self):
        """
        Gets the state_details of this SchemaVersion.

        :return: The state_details of this SchemaVersion.
        :rtype: list[str]
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """
        Sets the state_details of this SchemaVersion.

        :param state_details: The state_details of this SchemaVersion.
        :type: list[str]
        """

        self._state_details = state_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchemaVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
