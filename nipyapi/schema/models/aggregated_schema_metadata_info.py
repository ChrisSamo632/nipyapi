# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AggregatedSchemaMetadataInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_metadata': 'SchemaMetadata',
        'id': 'int',
        'timestamp': 'int',
        'schema_branches': 'list[AggregatedSchemaBranch]',
        'ser_des_infos': 'list[SerDesInfo]'
    }

    attribute_map = {
        'schema_metadata': 'schemaMetadata',
        'id': 'id',
        'timestamp': 'timestamp',
        'schema_branches': 'schemaBranches',
        'ser_des_infos': 'serDesInfos'
    }

    def __init__(self, schema_metadata=None, id=None, timestamp=None, schema_branches=None, ser_des_infos=None):
        """
        AggregatedSchemaMetadataInfo - a model defined in Swagger
        """

        self._schema_metadata = None
        self._id = None
        self._timestamp = None
        self._schema_branches = None
        self._ser_des_infos = None

        if schema_metadata is not None:
          self.schema_metadata = schema_metadata
        if id is not None:
          self.id = id
        if timestamp is not None:
          self.timestamp = timestamp
        if schema_branches is not None:
          self.schema_branches = schema_branches
        if ser_des_infos is not None:
          self.ser_des_infos = ser_des_infos

    @property
    def schema_metadata(self):
        """
        Gets the schema_metadata of this AggregatedSchemaMetadataInfo.

        :return: The schema_metadata of this AggregatedSchemaMetadataInfo.
        :rtype: SchemaMetadata
        """
        return self._schema_metadata

    @schema_metadata.setter
    def schema_metadata(self, schema_metadata):
        """
        Sets the schema_metadata of this AggregatedSchemaMetadataInfo.

        :param schema_metadata: The schema_metadata of this AggregatedSchemaMetadataInfo.
        :type: SchemaMetadata
        """

        self._schema_metadata = schema_metadata

    @property
    def id(self):
        """
        Gets the id of this AggregatedSchemaMetadataInfo.

        :return: The id of this AggregatedSchemaMetadataInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AggregatedSchemaMetadataInfo.

        :param id: The id of this AggregatedSchemaMetadataInfo.
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this AggregatedSchemaMetadataInfo.

        :return: The timestamp of this AggregatedSchemaMetadataInfo.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this AggregatedSchemaMetadataInfo.

        :param timestamp: The timestamp of this AggregatedSchemaMetadataInfo.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def schema_branches(self):
        """
        Gets the schema_branches of this AggregatedSchemaMetadataInfo.

        :return: The schema_branches of this AggregatedSchemaMetadataInfo.
        :rtype: list[AggregatedSchemaBranch]
        """
        return self._schema_branches

    @schema_branches.setter
    def schema_branches(self, schema_branches):
        """
        Sets the schema_branches of this AggregatedSchemaMetadataInfo.

        :param schema_branches: The schema_branches of this AggregatedSchemaMetadataInfo.
        :type: list[AggregatedSchemaBranch]
        """

        self._schema_branches = schema_branches

    @property
    def ser_des_infos(self):
        """
        Gets the ser_des_infos of this AggregatedSchemaMetadataInfo.

        :return: The ser_des_infos of this AggregatedSchemaMetadataInfo.
        :rtype: list[SerDesInfo]
        """
        return self._ser_des_infos

    @ser_des_infos.setter
    def ser_des_infos(self, ser_des_infos):
        """
        Sets the ser_des_infos of this AggregatedSchemaMetadataInfo.

        :param ser_des_infos: The ser_des_infos of this AggregatedSchemaMetadataInfo.
        :type: list[SerDesInfo]
        """

        self._ser_des_infos = ser_des_infos

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AggregatedSchemaMetadataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
